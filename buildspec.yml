version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
  pre_build:
    commands:
      # Define your OpenAPI specification for the API Gateway
      - |
          cat <<EOF > api_definition.yaml
          openapi: "3.0.0"
          info:
            version: 1.0.0
            title: Swagger Petstore
            license:
              name: MIT
          servers:
            - url: http://petstore.swagger.io/v1
          paths:
            /pets:
              get:
                summary: List all pets
                operationId: listPets
                tags:
                  - pets
                parameters:
                  - name: limit
                    in: query
                    description: How many items to return at one time (max 100)
                    required: false
                    schema:
                      type: integer
                      maximum: 100
                      format: int32
                responses:
                  '200':
                    description: A paged array of pets
                    headers:
                      x-next:
                        description: A link to the next page of responses
                        schema:
                          type: string
                    content:
                      application/json:    
                        schema:
                          $ref: "#/components/schemas/Pets"
                  default:
                    description: unexpected error
                    content:
                      application/json:
                        schema:
                          $ref: "#/components/schemas/Error"
              post:
                summary: Create a pet
                operationId: createPets
                tags:
                  - pets
                requestBody:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Pet'
                  required: true
                responses:
                  '201':
                    description: Null response
                  default:
                    description: unexpected error
                    content:
                      application/json:
                        schema:
                          $ref: "#/components/schemas/Error"
            /pets/{petId}:
              get:
                summary: Info for a specific pet
                operationId: showPetById
                tags:
                  - pets
                parameters:
                  - name: petId
                    in: path
                    required: true
                    description: The id of the pet to retrieve
                    schema:
                      type: string
                responses:
                  '200':
                    description: Expected response to a valid request
                    content:
                      application/json:
                        schema:
                          $ref: "#/components/schemas/Pet"
                  default:
                    description: unexpected error
                    content:
                      application/json:
                        schema:
                          $ref: "#/components/schemas/Error"
          components:
            schemas:
              Pet:
                type: object
                required:
                  - id
                  - name
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  tag:
                    type: string
              Pets:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Pet"
              Error:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
          EOF
  build:
    commands:
    # Create the REST API on API Gateway
    - aws apigateway create-rest-api --name "MyAPI-2" --region "eu-north-1" > rest_api.json
    # Extract the API ID from the response
    - export API_ID=$(jq -r '.id' rest_api.json)
    - echo $API_ID
    # Create root-level resource
    #- aws apigateway create-resource --rest-api-id $API_ID --path-part '/'
    # Extract root resource ID
    #- export ROOT_RESOURCE_ID=$(jq -r '.id' resource1.json)
    # Create child resources
    #- aws apigateway create-resource --rest-api-id 3vyoz1ocgj --region "eu-north-1" --parent-id "null" --path-part "pets" > resource1.json
    #- aws apigateway create-resource --rest-api-id 3vyoz1ocgj --region "eu-north-1" --parent-id "null" --path-part "pets/{petId}" > resource2.json
    # Extract resource IDs 
    #- export RESOURCE1_ID=$(jq -r '.id' resource1.json)
    #- export RESOURCE2_ID=$(jq -r '.id' resource2.json)
    #- echo $RESOURCE1_ID
    #- echo $RESOURCE2_ID
    # Define methods
    #- aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --authorization-type "NONE"
    #- aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method POST --authorization-type "NONE"
    #- aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE2_ID --http-method GET --authorization-type "NONE"
    #- aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE2_ID --http-method POST --authorization-type "NONE"
  post_build:
    commands:
      - echo "API Gateway setup complete."
