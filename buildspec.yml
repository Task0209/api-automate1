version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
  build:
    commands:
    # Create the REST API on API Gateway
    - aws apigateway create-rest-api --name "MyAPI-2" --region "eu-north-1" --endpoint-configuration types=REGIONAL > rest_api.json
    # Extract the API ID from the response
    - export API_ID=$(jq -r '.id' rest_api.json)
    - echo $API_ID
    # Extract root resource ID
    - export ROOT_RESOURCE_ID=$(jq -r '.rootResourceId' rest_api.json)
    - echo $ROOT_RESOURCE_ID
    # Create child resources
    - aws apigateway create-resource --rest-api-id $API_ID --region "eu-north-1" --parent-id $ROOT_RESOURCE_ID --path-part "hello" > resource1.json
    # Extract resource IDs 
    - export RESOURCE1_ID=$(jq -r '.id' resource1.json)
    - echo $RESOURCE1_ID
    # Define Put method request
    - aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --authorization-type "NONE"
    - aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method POST --authorization-type "NONE"
    # Define Put method response
    - aws apigateway put-method-response --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --status-code 200
    - aws apigateway put-method-response --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --status-code 201
    # Define Integration Method request
    - aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --type HTTP --integration-http-method GET --uri https://jsonplaceholder.typicode.com/todos/1
    - aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method POST --type HTTP --integration-http-method POST --uri https://jsonplaceholder.typicode.com/todos/1
    # Define Integration Method Response
    - aws apigateway put-integration-response --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method GET --status-code 200 --response-templates "{\"application/json\":\"\"}"
    - aws apigateway put-integration-response --rest-api-id $API_ID --resource-id $RESOURCE1_ID --http-method POST --status-code 201 --response-templates "{\"application/json\":\"\"}"
    # Create New API Key
    #- aws apigateway create-api-key  --name MyAPIKey --description "My API Key for Testing" --enabled true
    # Define deployment and stage
    - aws apigateway create-deployment --rest-api-id $API_ID --stage-name dev --description "Initial deployment" > deploy.json
    - export deploy_ID=$(jq -r '.id' deploy.json)
    - echo $deploy_ID
    - aws apigateway create-stage --rest-api-id $API_ID --stage-name qa --deployment-id $deploy_ID --description "Testing stage"
    # Create Usage Plans
    - aws apigateway create-usage-plan --name base-plans --description "My Usage Plan Description" --throttle "rateLimit=500, burstLimit=100" --quota "limit=1000,offset=0,period=MONTH" > usageplan.json 
     # Fetch Endpoint URL of API Gateway
     - aws apigateway get-rest-apis --rest-api-id $API_ID --query "endpointConfiguration.type[?endsWIth(@, ':REGIONAL')].[vpcEndpointId]"
     # Extract usage plan IDs
     #- export usage_ID=$(jq -r '.id' usageplan.json)
     #- echo $usage_ID
    # Extract API Keys
    #- aws apigateway get-api-keys --query "items[?name=='YOUR_API_KEY_NAME'].id"
    # Associate API Keys with Usage Plan
    #- aws apigateway create-usage-plan-key --usage-plan-id <USAGE_PLAN_ID> --key-id s1b4saxgif --key-type API_KEY
   # Step 4: Associate Usage Plan with API Stage
   #- aws apigateway create-deployment --rest-api-id $API_ID --stage-name <STAGE_NAME>
  post_build:
    commands:
      - echo "API Gateway setup complete."
